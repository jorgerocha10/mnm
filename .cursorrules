# Cursor Rules

## Instructions

Maps & Memories will operate as a simple e-commerce platform without user logins. Customers can browse and purchase products seamlessly, while an admin panel will be available for managing products and orders visible only with a login and password for admin, not users.

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[x] ` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

##

Brand Styling Guide
The e-commerce platform should strictly follow the Maps & Memories brand identity as per the brand guide.
Typography
Web fonts: Use a clean, modern sans-serif font for web content (e.g., Lato, Montserrat)
Color Palette
• White (#F7F5F6) - Background elements
• Dark Blue (#253946) - Main text and headings
• Soft Blue (#95A7B5) - Accents
• Beige (#D2BDA2) - Secondary background
• Warm Brown (#A76825) - Call-to-action buttons
UI Elements
• Minimalist and elegant design
• Subtle borders and spacing to maintain a clean look
• Icons should match the outlined, modern style used in branding
Imagery
• Use high-resolution images with soft shadows
• Consistent lighting for product shots
• Backgrounds should be neutral or lightly textured
Buttons & Links
• Call-to-action buttons (e.g., "Buy Now") should use Warm Brown (#A76825)
• Secondary buttons (e.g., "Learn More") can use Soft Blue (#95A7B5)
• Hover effects should be subtle (light color changes or soft shadows)

## Lessons

1. Use `npx shadcn@latest add [component]` instead of `npx shadcn-ui@latest add [component]` when installing Shadcn UI components.
2. In Next.js 14+, page props params must be typed as a Promise. Example:
   ```typescript
   type tParams = Promise<{ id: string }>;
   interface PageProps {
     params: tParams;
   }
   ```
   Then await the params in the component:
   ```typescript
   export default async function Page(props: PageProps) {
     const { id } = await props.params;
   }
   ```
3. Use `const session = await auth()` instead of `const session = await getServerSession(authOptions)` for Next.js authentication. The new `auth()` function is the recommended way to get the session in Next.js Auth v5.
4. When importing `useRouter` from 'next/navigation', the component must be marked as a client component using the `'use client'` directive at the top of the file, as this hook only works on the client side.
5. Install Shadcn UI components individually using separate commands (`npx shadcn@latest add [component]`) rather than installing multiple components at once to avoid PowerShell console errors and ensure each component is installed correctly with the proper dependencies.
6. Use `bcryptjs` instead of `bcrypt` for password hashing in Next.js projects, as it's more compatible with various environments and doesn't require native bindings.
7. Use CommonJS syntax (`require()`) instead of ES modules (`import`) in Prisma seed files when using ts-node to avoid "Cannot use import statement outside a module" errors.
8. When using Stripe in Next.js client components, use environment variables with the `NEXT_PUBLIC_` prefix, and ensure proper error handling for cases when the keys might be undefined.
9. Always declare variables before they are used in JavaScript/TypeScript. Unlike function declarations which are hoisted completely, variables declared with `const` and `let` are not initialized until the declaration is evaluated. This can lead to "Cannot access 'variable' before initialization" errors. For shared constants like enum values or arrays, define them at the top of the file outside any functions.

## Scratchpad

### 1. Project Setup and Configuration [ ]

- [x] Initialize Next.js 15 project with TypeScript
  - [x] Create project with `npx create-next-app@latest maps-and-memories --typescript`
  - [x] Configure Next.js app router structure
  - [x] Set up environment variables (.env.local)
- [x] Set up project structure and folders
  - [x] Create components directory structure (ui, layout, shared)
  - [x] Set up app directory with route groups ((home), (admin))
  - [x] Create lib folder for utilities and hooks
- [x] Configure ESLint and Prettier
  - [ ] Add custom ESLint rules
  - [ ] Set up Prettier configuration
  - [ ] Add pre-commit hooks with Husky
- [ ] Install and configure dependencies:
  - [x] Set up Shadcn UI
    - [x] Initialize with `npx shadcn@latest init`
    - [x] Install core components:
      - [x] Button
      - [x] Card
      - [x] Input
      - [x] Form
      - [x] Checkbox
      - [x] Select
      - [x] Sonner (toast)
      - [x] Dialog
      - [x] Dropdown-menu
      - [x] Table
      - [x] Tabs
      - [x] Avatar
      - [x] Separator
      - [x] Skeleton
      - [x] Popover
      - [x] Sheet
      - [x] Radio-group
      - [x] Slider
      - [x] Accordion
      - [x] Textarea
    - [ ] Configure theme with Maps & Memories brand colors
  - [x] Install Lucide icons for UI elements
  - [x] Configure Zod schemas for form validation
  - [x] Set up Zustand store for:
    - [ ] Cart state management
    - [ ] UI state (filters, modals)
    - [ ] User preferences
  - [x] Configure Resend for email templates and sending
    - [ ] Create email templates
    - [ ] Configure sending service
  - [x] Set up Uploadthing for product image uploads
    - [ ] Configure API routes
    - [ ] Create upload components
  - [x] Configure Prisma ORM and connect to database
    - [x] Initialize with PostgreSQL
    - [x] Set up models
    - [x] Create migration scripts
  - [x] Set up PostgreSQL database connection
    - [x] Set up local/cloud database
    - [x] Configure connection string in .env
  - [x] Configure NextAuth.js beta for admin authentication
    - [x] Set up auth routes
    - [x] Configure providers
    - [x] Create protected routes
  - [x] Integrate Stripe for payment processing
    - [x] Set up payment intent API
    - [x] Configure Stripe provider component
    - [x] Implement payment form with proper error handling
    - [ ] Set up webhook endpoints

### 2. Database and Authentication [x]

- [x] Set up PostgreSQL database
  - [x] Create database instance (local/cloud)
  - [x] Configure connection string in .env
  - [x] Set up migrations workflow
- [x] Configure Prisma schema:
  - [x] Admin model
    - [x] Fields: id, name, email, password (hashed), role, createdAt, updatedAt
  - [x] Product model
    - [x] Base fields: id, name, slug, description, price, images, stock, createdAt, updatedAt
    - [x] Frame options: frameSizes (enum: 8x8, 10x10), frameTypes (enum: pine, dark)
    - [x] Category relationship
    - [x] Reviews relationship
  - [x] Order model
    - [x] Base fields: id, customerEmail, customerName, status, total, createdAt, updatedAt
    - [x] Address information: shippingAddress, city, country, postalCode
    - [x] Map information: latitude, longitude, address
    - [x] Product options: frameSize, frameType, engravingText
    - [x] Payment information: paymentIntentId, paymentStatus
  - [x] Category model
    - [x] Fields: id, name, slug, image, products
  - [x] Review model
    - [x] Fields: id, rating, comment, customerName, productId, createdAt
  - [x] Cart model
    - [x] Fields: id, cartItems, cartId (cookie), createdAt, updatedAt
  - [x] Create database seeding script for initial data
- [x] Implement NextAuth.js authentication:
  - [x] Configure auth.ts with Credentials provider
  - [x] Set up password hashing and validation
  - [x] Create JWT strategy with proper expiration
  - [x] Implement protected API routes for admin functions
  - [x] Create middleware for admin route protection
  - [x] Set up login and logout functionality

### 3. Core Features - Customer Side [ ]

- [x] Home Layout:
  - [x] Create `(home)` folder in `app` directory
  - [x] Design responsive header with:
    - [x] Logo (logo.png)
    - [x] Navigation menu
    - [x] Cart icon with item count
    - [x] Mobile menu for smaller screens
  - [x] Create footer with:
    - [x] Company information
    - [x] Navigation links
    - [x] Social media icons
    - [x] Newsletter signup
  - [x] Implement responsive container layout
- [x] Homepage:
  - [x] Build hero section with:
    - [x] Heading: "Turn Your Special Places into Lasting Memories"
    - [x] CTA button to shop
    - [x] Featured image (placeholder)
  - [x] Create featured products section:
    - [x] Product cards with images
    - [x] Quick view functionality
    - [x] Add to cart button
  - [x] Design "How It Works" section:
    - [x] Step-by-step process explanation
    - [x] Illustrative images
    - [x] Secondary CTA
- [x] Products Catalog:
  - [x] Build products page (`/products`):
    - [x] Implement filter sidebar with:
      - [x] Category filters
      - [x] Price range
      - [x] Frame type filters
      - [x] Frame size filters
    - [x] Create product grid with:
      - [x] Pagination controls
      - [x] Sort options
      - [x] Product cards
    - [x] Add search functionality:
      - [x] Search input with debounce
      - [x] Search results display
      - [x] No results handling
  - [x] Implement mobile-responsive filtering
- [x] Product pages:
  - [x] Create dynamic product route (`/products/[slug]`)
  - [x] Design product detail page:
    - [x] Image gallery with thumbnails and zoom
    - [x] Product information section
    - [x] Price and availability display
  - [x] Build product options form:
    - [x] Frame size selector (8x8 or 10x10)
    - [x] Location input with toggle:
      - [x] Address input with autocomplete
      - [x] Coordinates input (latitude/longitude)
    - [x] Frame type selector (pine wood or dark wood)
    - [x] Engraving text input with character limit
  - [x] Add related products section
  - [x] Implement reviews and ratings section
- [x] Shopping cart:
  - [x] Create cart page (`/cart`):
    - [x] Cart item listing
    - [x] Quantity adjustment controls
    - [x] Remove item functionality
    - [x] Price subtotals
  - [x] Implement cart state management:
    - [x] Add to cart functionality
    - [x] Update quantity functionality
    - [x] Remove item functionality
  - [x] Set up cart state persistence:
    - [x] Local storage fallback
    - [ ] Server-side cart storage
- [x] Checkout process:
  - [x] Design multi-step checkout:
    - [x] Shipping information form
    - [x] Review cart contents
    - [x] Payment method selection
  - [x] Implement Stripe payment integration:
    - [x] Create Stripe Elements form
    - [x] Handle payment intents
    - [x] Process payment submission
  - [x] Build order confirmation:
    - [x] Success page with order details
    - [x] Email confirmation trigger
    - [x] "Continue shopping" option

### 4. Admin Dashboard [ ]

- [x] Admin authentication and authorization
  - [x] Create sign-in page (`/admin/signin`)
  - [x] Implement session management
  - [x] Set up role-based access control
- [x] Dashboard overview:
  - [x] Layout and Structure:
    - [x] Create admin dashboard layout with sidebar navigation
    - [x] Build responsive dashboard grid system
    - [x] Implement breadcrumb navigation
    - [x] Add loading states and error boundaries
  - [x] Key Metrics Cards:
    - [x] Total revenue widget with chart
    - [x] Orders count with trend indicator
    - [x] Customer count summary
    - [x] Average order value calculation
  - [x] Recent Orders Table:
    - [x] Implement data table with server-side pagination
    - [x] Add columns: Order ID, Customer, Total, Status, Date
    - [x] Include sorting and filtering
    - [x] Add quick action buttons
- [x] Product management:
  - [x] Create products listing page (`/admin/products`):
    - [x] Searchable and filterable table
    - [x] Bulk selection actions
    - [x] Status toggles
  - [x] Build product form (`/admin/products/new`, `/admin/products/[id]/edit`):
    - [x] General information fields
    - [x] Pricing and inventory
    - [x] Frame options configuration
    - [x] SEO metadata
  - [x] Implement image management:
    - [x] Multi-image upload with Uploadthing
    - [x] Image reordering
    - [x] Image cropping and optimization
- [ ] Order management:
  - [ ] Create orders listing page (`/admin/orders`):
    - [ ] Filterable by date, status, customer
    - [ ] Quick status update actions
    - [ ] Export functionality
  - [ ] Build order detail view (`/admin/orders/[id]`):
    - [ ] Customer information
    - [ ] Order items with options
    - [ ] Status update workflow
    - [ ] Payment details
    - [ ] Shipping information

### 5. Advanced Features [ ]

- [ ] Real-time notifications
  - [ ] Set up WebSocket connection for admin
  - [ ] Implement notification component
  - [ ] Add sound alerts for new orders
- [ ] Email system (Resend):
  - [ ] Design email templates:
    - [ ] Order confirmation
    - [ ] Shipping updates
    - [ ] Admin password reset
  - [ ] Configure email sending triggers
  - [ ] Add email preview in admin
- [ ] Search optimization
  - [ ] Implement efficient product search
  - [ ] Add search suggestions
  - [ ] Build search results page
- [ ] Performance optimization:
  - [ ] Set up Next.js Image component optimization
  - [ ] Implement caching strategies for API routes
  - [ ] Add loading skeletons for UI elements
  - [ ] Optimize database queries
  - [ ] Set up CDN for static assets
- [ ] Analytics and reporting
  - [ ] Implement basic analytics dashboard
  - [ ] Create sales report generation
  - [ ] Add product performance metrics
  - [ ] Set up export functionality for reports

### 6. Testing and Deployment [ ]

- [ ] Unit testing
  - [ ] Set up Jest configuration
  - [ ] Write component tests
  - [ ] Create API route tests
  - [ ] Test utility functions
- [ ] Integration testing
  - [ ] Test checkout flow
  - [ ] Verify admin workflows
  - [ ] Validate form submissions
- [ ] E2E testing
  - [ ] Configure Playwright
  - [ ] Create customer journey tests
  - [ ] Test admin dashboard operations
- [ ] Security audit
  - [ ] Review authentication implementation
  - [ ] Check API endpoints for vulnerabilities
  - [ ] Validate input sanitization
  - [ ] Test file upload security
- [ ] Production deployment:
  - [ ] Set up Vercel project
  - [ ] Configure environment variables
  - [ ] Set up database connection
  - [ ] Configure Stripe webhook endpoints
  - [ ] Set up monitoring and error tracking
  - [ ] Create database backup strategy

### 7. Documentation [ ]

- [ ] API documentation
  - [ ] Document all API endpoints
  - [ ] Create request/response examples
  - [ ] Add authentication details
- [ ] User guide
  - [ ] Write customer website guide
  - [ ] Create product ordering instructions
  - [ ] Document checkout process
- [ ] Admin documentation
  - [ ] Create admin dashboard guide
  - [ ] Document order management process
  - [ ] Add product creation tutorial
- [ ] Deployment guide
  - [ ] Document environment setup
  - [ ] Create database migration guide
  - [ ] Add troubleshooting section
  - [ ] Include performance optimization tips
