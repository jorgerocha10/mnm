generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String
  price       Decimal     @db.Decimal(10, 2)
  images      String[]
  stock       Int         @default(0)
  frameTypes  FrameType   @default(PINE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  String?
  frameSizes  FrameSize?
  orderItems  OrderItem[]
  category    Category?   @relation(fields: [categoryId], references: [id])
  reviews     Review[]
}

model Order {
  id              String        @id @default(cuid())
  customerEmail   String
  customerName    String
  status          OrderStatus   @default(PENDING)
  total           Decimal       @db.Decimal(10, 2)
  shippingAddress String
  city            String
  country         String
  postalCode      String
  latitude        Float?
  longitude       Float?
  mapAddress      String?
  paymentIntentId String?
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  mapZoom         Int?          @default(13)
  orderItems      OrderItem[]
}

model OrderItem {
  id            String     @id @default(cuid())
  quantity      Int
  price         Decimal    @db.Decimal(10, 2)
  frameType     FrameType
  engravingText String?
  orderId       String
  productId     String
  mapZoom       Int?       @default(13)
  frameSize     FrameSize?
  order         Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product    @relation(fields: [productId], references: [id])
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Review {
  id           String   @id @default(cuid())
  rating       Int      @db.SmallInt
  comment      String
  customerName String
  createdAt    DateTime @default(now())
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(cuid())
  cartId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
}

model CartItem {
  id            String     @id @default(cuid())
  quantity      Int
  frameType     FrameType
  engravingText String?
  latitude      Float?
  longitude     Float?
  mapAddress    String?
  cartId        String
  productId     String
  mapZoom       Int?       @default(13)
  frameSize     FrameSize?
  cart          Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  SUPERADMIN
}

enum FrameType {
  PINE
  DARK
}

enum FrameSize {
  SMALL
  LARGE
  SIZE_6X6
  SIZE_8_5X8_5
  SIZE_8_5X12
  SIZE_12X12
  SIZE_12X16
  SIZE_16X16
  SIZE_16X20
  SIZE_20X20
  SIZE_20X28
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
